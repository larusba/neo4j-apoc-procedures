plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id "org.asciidoctor.convert" version "1.5.3"
    id "com.bmuschko.nexus" version "2.3.1"
    id "me.champeau.gradle.jmh" version "0.4.4"
    id "io.codearte.nexus-staging" version "0.9.0"
}
asciidoctorj {
    version = '1.5.5'
}
apply plugin: 'io.codearte.nexus-staging'


sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    project {
        ext.jdkName = '1.8'
        ext.languageLevel = '1.8'
    }
}

group = 'org.neo4j.procedure'
version = '3.1.3.8'
archivesBaseName = 'apoc'

jar {
    manifest {
        attributes 'Implementation-Version': version
    }
}

description = """neo4j-apoc-procedures"""

ext {
    neo4jVersion = "3.1.5"
}

repositories {
     maven { url "https://m2.neo4j.org/content/repositories/snapshots" }
     mavenCentral()
     maven { url "https://m2.neo4j.org/content/repositories/snapshots" }
     maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

compileJava {
// type¦qualified name¦signature¦description¦execution mode¦location¦deprecated by
    options.compilerArgs += [
            "-AIgnoreContextWarnings",
            "-AGeneratedDocumentationPath=" + projectDir + "/build/generated-documentation",
            "-ADocumentation.FieldDelimiter=¦",
            "-ADocumentation.ExportedHeaders=type¦qualified name¦description",
            "-ADocumentation.QuotedFields=false",
            "-ADocumentation.DelimitedFirstField=true",
            "-ADocumentation.ExportGrouping=SINGLE,PACKAGE"]
}

dependencies {
    compile group: 'commons-codec', name: 'commons-codec', version:'1.9'
    compile 'com.jayway.jsonpath:json-path:2.2.0'
    compile 'org.hdrhistogram:HdrHistogram:2.1.9'
    compileOnly group: 'net.biville.florent', name: 'neo4j-sproc-compiler', version:'1.2'

    compile 'com.novell.ldap:jldap:2009-10-07'

    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version:'1.3'
    testCompile group: 'org.apache.derby', name: 'derby', version:'10.12.1.1'
    testCompile group: 'org.neo4j', name: 'neo4j-enterprise', version:neo4jVersion
    testCompile group: 'org.neo4j', name: 'neo4j-causal-clustering', version:neo4jVersion, classifier: "tests"
    testCompile group: 'org.neo4j', name: 'neo4j-kernel', version:neo4jVersion, classifier: "tests"
    testCompile group: 'org.neo4j', name: 'neo4j-io', version:neo4jVersion, classifier: "tests"
    testCompile group: 'org.neo4j', name: 'neo4j-bolt', version: '3.0.1'

    compileOnly 'org.mongodb:mongodb-driver:3.2.2'
    testCompile 'org.mongodb:mongodb-driver:3.2.2'

    compileOnly 'com.couchbase.client:java-client:2.3.1'
    testCompile 'com.couchbase.client:java-client:2.3.1'

    compileOnly(group: 'org.neo4j', name: 'neo4j', version:neo4jVersion)
    compileOnly(group: 'org.neo4j', name: 'neo4j-enterprise', version:neo4jVersion)
    compileOnly(group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version:'1.9.7')
    testCompile(group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version:'1.9.7')
    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.0')
    compileOnly(group: 'org.ow2.asm', name: 'asm', version:'5.0.2')
    compile group: 'com.github.javafaker', name: 'javafaker', version:'0.10'
    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '1.4.0'

    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    jmh group: 'org.neo4j', name: 'neo4j-lucene-index', version:neo4jVersion
    jmh group: 'org.neo4j', name: 'neo4j-kernel', version:neo4jVersion, classifier: "tests"
}

test {
    systemProperties 'user.language': 'en', 'user.country': 'US'
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
    if (System.env.TRAVIS !=null) {
        minHeapSize = "128m"
        maxHeapSize = "512m"
    }
}

javadoc {
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
}

/**************
* ASCIIDOCTOR *
**************/

asciidoctor {
    sourceDir = file('docs')
    sources { include 'index.adoc' }
    outputDir = file('build/docs')
    attributes  'apoc-version' : version,
                'apoc-release' : "3.1.3.8",
                'neo4j-version' : neo4jVersion,
                'branch' : "3.1"
}

asciidoctor.doLast {
    copy {
        from 'build/docs/html5/index.html'
        into "build/docs"
        rename { String filename -> filename.replace("index","index31") }
    }
}

assemble.dependsOn(asciidoctor)

/******
* END *
******/

// publishing

nexusStaging {
    packageGroup = "org.neo4j"
    stagingProfileId = "acdc2431d20c3d"

    //serverUrl = stable release repository - by default Sonatype OSSRH - https://oss.sonatype.org/service/local/
    //username  = (optional) - username to the server
    // password = (optional) - password
    //numberOfRetries (optional) - number of retries when waiting for a repository to change a state - by default 7
    //delayBetweenRetriesInMillis (optional) - delay between retries - by default 1000 milliseconds
}

modifyPom {
    project {
        name 'neo4j-apoc-procedures'
        packaging 'jar'
        description 'A collection of useful Neo4j Procedures'
        url 'http://github.com/neo4j-contrib/neo4j-apoc-procedures'

        organization {
            name "Neo Technology, Inc."
            url "http://neotechnology.com"
        }

        scm {
            url 'https://github.com/neo4j-contrib/neo4j-apoc-procedures'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                comments """Note that this license is for the project itself,
and not for its dependencies."""
                distribution "repo"
            }
        }

        developers {
            developer {
                id 'michaelhunger'
                name 'Michael Hunger'
                email 'michael.hunger@neo4j.com'
            }
        }
    }
}

// tweaks for travis
// from
if (System.env.TRAVIS == 'true') {
  allprojects {
    tasks.withType(GroovyCompile) {
      groovyOptions.fork = false
    }
    tasks.withType(Test) {
      // containers (currently) have 2 dedicated cores and 4GB of memory
      maxParallelForks = 2
      minHeapSize = '128m'
    }
  }
}

task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.testRuntime 
}

jmh {
//    include = ['some regular expression'] // include pattern (regular expression) for benchmarks to be executed
//    exclude = ['some regular expression'] // exclude pattern (regular expression) for benchmarks to be executed
    iterations = 5 // Number of measurement iterations to do.
    benchmarkMode = ['ss']
//    benchmarkMode = ['thrpt','ss'] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
//    batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
    fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
//    failOnError = false // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
//    forceGC = false // Should JMH force GC between iterations?
//    jvm = 'myjvm' // Custom JVM to use when forking.
//    jvmArgs = ['Custom JVM args to use when forking.']
//    jvmArgsAppend = ['Custom JVM args to use when forking (append these)']
//    jvmArgsPrepend =[ 'Custom JVM args to use when forking (prepend these)']
//    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
//    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
//    operationsPerInvocation = 10 // Operations per invocation.
//    benchmarkParameters =  [:] // Benchmark parameters.
//    profilers = [] // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]
//    timeOnIteration = '1s' // Time to spend at each measurement iteration.
//    resultFormat = 'CSV' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
//    synchronizeIterations = false // Synchronize iterations?
//    threads = 4 // Number of worker threads to run with.
//    threadGroups = [2,3,4] //Override thread group distribution for asymmetric benchmarks.
//    timeout = '1s' // Timeout for benchmark iteration.
//    timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
//    verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
//    warmup = '1s' // Time to spend at each warmup iteration.
//    warmupBatchSize = 2 // Warmup batch size: number of benchmark method calls per operation.
    warmupForks = 1 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
    warmupIterations = 1 // Number of warmup iterations to do.
//    warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
//    warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.
    zip64 = true // Use ZIP64 format for bigger archives
//    jmhVersion = '1.15' // Specifies JMH version
//    includeTests = true // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
//    duplicateClassesStrategy = 'fail' // Strategy to apply when encountring duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)
}

jmhJar {
    mergeServiceFiles()
}
